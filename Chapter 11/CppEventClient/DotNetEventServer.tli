// Created by Microsoft (R) C/C++ Compiler Version 12.00.8447.0 (c03702e3).
//
// DotNetEventServer.tli
//
// Wrapper implementations for Win32 type library C:\Apress Books\InteropBook\Labs\Chapter 11\DotNetEventServer\bin\Debug\DotNetEventServer.tlb
// compiler-generated file created 02/09/02 at 17:22:08 - DO NOT EDIT!

#pragma once

//
// dispinterface _DEventInterface wrapper method implementations
//

inline HRESULT _DEventInterface::TheEvent ( _bstr_t msg ) {
    return _com_dispatch_method(this, 0x60020000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)msg);
}

//
// dispinterface _DEventInterfaceOne wrapper method implementations
//

inline HRESULT _DEventInterfaceOne::EventA ( ) {
    return _com_dispatch_method(this, 0x60020000, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface _DEventInterfaceTwo wrapper method implementations
//

inline HRESULT _DEventInterfaceTwo::EventB ( ) {
    return _com_dispatch_method(this, 0x60020000, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface _DEventInterfaceThree wrapper method implementations
//

inline HRESULT _DEventInterfaceThree::EventC ( ) {
    return _com_dispatch_method(this, 0x60020000, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface _DotNetEventSender wrapper method implementations
//

inline _bstr_t _DotNetEventSender::GetToString ( ) {
    BSTR _result;
    HRESULT _hr = get_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL _DotNetEventSender::Equals ( const _variant_t & obj ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Equals(obj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _DotNetEventSender::GetHashCode ( ) {
    long _result;
    HRESULT _hr = raw_GetHashCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _TypePtr _DotNetEventSender::GetType ( ) {
    struct _Type * _result;
    HRESULT _hr = raw_GetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypePtr(_result, false);
}

inline HRESULT _DotNetEventSender::add_TheEvent ( IUnknown * value ) {
    HRESULT _hr = raw_add_TheEvent(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DotNetEventSender::remove_TheEvent ( IUnknown * value ) {
    HRESULT _hr = raw_remove_TheEvent(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DotNetEventSender::FireTheEvent ( ) {
    HRESULT _hr = raw_FireTheEvent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _DotNetMultiEventSourceClass wrapper method implementations
//

inline _bstr_t _DotNetMultiEventSourceClass::GetToString ( ) {
    BSTR _result;
    HRESULT _hr = get_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL _DotNetMultiEventSourceClass::Equals ( const _variant_t & obj ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Equals(obj, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _DotNetMultiEventSourceClass::GetHashCode ( ) {
    long _result;
    HRESULT _hr = raw_GetHashCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _TypePtr _DotNetMultiEventSourceClass::GetType ( ) {
    struct _Type * _result;
    HRESULT _hr = raw_GetType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TypePtr(_result, false);
}

inline HRESULT _DotNetMultiEventSourceClass::add_EventA ( IUnknown * value ) {
    HRESULT _hr = raw_add_EventA(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DotNetMultiEventSourceClass::remove_EventA ( IUnknown * value ) {
    HRESULT _hr = raw_remove_EventA(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DotNetMultiEventSourceClass::add_EventB ( IUnknown * value ) {
    HRESULT _hr = raw_add_EventB(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DotNetMultiEventSourceClass::remove_EventB ( IUnknown * value ) {
    HRESULT _hr = raw_remove_EventB(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DotNetMultiEventSourceClass::add_EventC ( IUnknown * value ) {
    HRESULT _hr = raw_add_EventC(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DotNetMultiEventSourceClass::remove_EventC ( IUnknown * value ) {
    HRESULT _hr = raw_remove_EventC(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
